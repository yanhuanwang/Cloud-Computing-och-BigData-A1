---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "mysecretpassword"
        - name: POSTGRES_DB
          value: "expensedb"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: expense-service-deployment
  labels:
    app: expense-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: expense-service
  template:
    metadata:
      labels:
        app: expense-service
    spec:
      containers:
      - name: expense-service
        image: expense-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8081
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: expense-service
spec:
  selector:
    app: expense-service
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gui-service-deployment
  labels:
    app: gui-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gui-service
  template:
    metadata:
      labels:
        app: gui-service
    spec:
      containers:
      - name: gui-service
        image: gui-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: gui-service
spec:
  selector:
    app: gui-service
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: expense-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type"
spec:
  rules:
  - host: expense.localhost
    http:
      paths:
      - path: /add-expense
        pathType: Prefix
        backend:
          service:
            name: expense-service
            port:
              number: 8081
      - path: /get-expenses
        pathType: Prefix
        backend:
          service:
            name: expense-service
            port:
              number: 8081
      - path: /update-expense
        pathType: Prefix
        backend:
          service:
            name: expense-service
            port:
              number: 8081
      - path: /delete-expense
        pathType: Prefix
        backend:
          service:
            name: expense-service
            port:
              number: 8081
      - path: /swagger-ui/
        pathType: Prefix
        backend:
          service:
            name: gui-service
            port:
              number: 80
  tls: []